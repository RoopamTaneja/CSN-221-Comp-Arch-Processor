# Preferably run one at a time

# prime
load_val:
    lw a5, 0x00000000(zero)
    li a4, 2

loop:
    blt a4, a5, divide_check 
    jal zero, true

divide_check:
    rem a6, a5, a4
    beq a6, zero, false # rem == 0 => not prime
    addi a4, a4, 1 # else check for next divisor
    jal zero, loop

false:
    li a0, 0 # not prime
    sw a0, 0x00000004(zero)
    jal zero, exit

true:
    li a0, 1 # prime
    sw a0, 0x00000004(zero)

exit:
    addi zero, zero, 0


# factorial
load_val:
    lw a4, 0x00000000(zero) # loading from memory
    li a5, 1
    li a6, 1

loop:
    blt a4, a6, store
    mul a5, a5, a4
    addi a4, a4, -1
    jal zero, loop

store:
    sw a5, 0x00000004(zero) # storing result


# gcd_lcm
load_val:
    lw a4, 0x00000000(zero)
    lw a5, 0x00000004(zero) 

find_min: # a6 = min(a4,a5)
    blt a4, a5, load_other
    addi a6, a5, 0
    jal zero, loop_gcd

load_other:
    addi a6, a4, 0

loop_gcd:
    li a3, 1
    blt a6, a3, exit # while (a6>0)
    rem a0, a4, a6 # a0 = a4%a6
    rem a1, a5, a6 # a1 = a5%a6
    or a2, a0, a1 # a0 or a1 == 0 only iff both rem == 0
    beq a2, zero, store_gcd # in that case it's our gcd
    addi a6, a6, -1 # a6--
    jal zero, loop_gcd

store_gcd:
    sw a6, 0x00000008(zero)

lcm:
    lw a6, 0x00000008(zero) # load gcd
    # lcm = (a*b)/gcd
    div a7, a4, a6
    mul a7, a7, a5

store_lcm:
    sw a7, 0x0000000C(zero)

exit:
    addi zero, zero, 0